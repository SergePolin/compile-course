
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiler;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import com.compiler.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ImperativeLangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ImperativeLangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ImperativeLangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ImperativeLangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\017\007\000\002\017\011" +
    "\000\002\017\011\000\002\017\015\000\002\017\013\000" +
    "\002\020\003\000\002\020\004\000\002\005\011\000\002" +
    "\005\007\000\002\005\003\000\002\005\010\000\002\005" +
    "\015\000\002\005\006\000\002\005\010\000\002\005\011" +
    "\000\002\005\007\000\002\005\007\000\002\005\005\000" +
    "\002\006\011\000\002\006\010\000\002\021\004\000\002" +
    "\012\003\000\002\012\002\000\002\011\003\000\002\011" +
    "\005\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\007\000\002\014\003\000\002\015\007\000\002" +
    "\015\010\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\006\000\002\007\006\000\002" +
    "\007\005\000\002\010\003\000\002\010\005\000\002\010" +
    "\002\000\002\016\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\010\011\005\017\010\020\011\001\002\000" +
    "\012\002\000\011\005\017\010\020\011\001\002\000\004" +
    "\004\264\001\002\000\004\002\263\001\002\000\012\002" +
    "\uffff\011\uffff\017\uffff\020\uffff\001\002\000\004\004\045" +
    "\001\002\000\004\004\012\001\002\000\004\031\013\001" +
    "\002\000\004\034\014\001\002\000\004\011\015\001\002" +
    "\000\004\004\041\001\002\000\006\011\017\024\020\001" +
    "\002\000\004\004\022\001\002\000\004\044\021\001\002" +
    "\000\012\002\ufffb\011\ufffb\017\ufffb\020\ufffb\001\002\000" +
    "\004\042\023\001\002\000\020\004\030\035\024\036\026" +
    "\037\031\040\033\041\025\076\032\001\002\000\060\025" +
    "\uffe3\026\uffe3\031\uffe3\032\uffe3\044\uffe3\046\uffe3\052\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\001\002\000\060\025\uffdf\026" +
    "\uffdf\031\uffdf\032\uffdf\044\uffdf\046\uffdf\052\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\001\002\000\060\025\uffe2\026\uffe2\031" +
    "\uffe2\032\uffe2\044\uffe2\046\uffe2\052\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\001\002\000\004\044\040\001\002\000\060\025" +
    "\uffdd\026\uffdd\031\uffdd\032\uffdd\044\uffdd\046\uffdd\052\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\073\uffdd\001\002\000\060\025\uffe0\026" +
    "\uffe0\031\uffe0\032\uffe0\044\uffe0\046\uffe0\052\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0" +
    "\072\uffe0\073\uffe0\001\002\000\060\025\uffe1\026\uffe1\031" +
    "\uffe1\032\uffe1\044\uffe1\046\uffe1\052\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\001\002\000\004\051\034\001\002\000\004\006" +
    "\035\001\002\000\004\052\036\001\002\000\020\004\030" +
    "\035\024\036\026\037\031\040\033\041\025\076\032\001" +
    "\002\000\060\025\uffde\026\uffde\031\uffde\032\uffde\044\uffde" +
    "\046\uffde\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\001\002\000" +
    "\006\011\uffdb\024\uffdb\001\002\000\004\042\042\001\002" +
    "\000\020\004\030\035\024\036\026\037\031\040\033\041" +
    "\025\076\032\001\002\000\004\044\044\001\002\000\006" +
    "\011\uffdc\024\uffdc\001\002\000\004\045\046\001\002\000" +
    "\006\004\050\046\uffe7\001\002\000\004\046\057\001\002" +
    "\000\004\042\055\001\002\000\006\046\uffe8\054\053\001" +
    "\002\000\006\046\uffe6\054\uffe6\001\002\000\004\004\050" +
    "\001\002\000\006\046\uffe5\054\uffe5\001\002\000\020\004" +
    "\030\035\024\036\026\037\031\040\033\041\025\076\032" +
    "\001\002\000\006\046\uffe4\054\uffe4\001\002\000\006\031" +
    "\061\042\060\001\002\000\020\004\030\035\024\036\026" +
    "\037\031\040\033\041\025\076\032\001\002\000\022\004" +
    "\072\011\066\012\067\014\063\015\065\021\073\027\071" +
    "\030\062\001\002\000\004\045\252\001\002\000\022\004" +
    "\102\005\100\006\105\007\076\010\077\045\104\057\075" +
    "\074\103\001\002\000\024\004\072\011\066\012\067\014" +
    "\063\015\065\021\073\024\243\027\071\030\062\001\002" +
    "\000\004\004\230\001\002\000\004\004\221\001\002\000" +
    "\022\004\102\005\100\006\105\007\076\010\077\045\104" +
    "\057\075\074\103\001\002\000\026\004\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\021\ufff8\024\ufff8\027\ufff8" +
    "\030\ufff8\001\002\000\004\045\202\001\002\000\010\043" +
    "\166\051\164\053\165\001\002\000\022\004\102\005\100" +
    "\006\105\007\076\010\077\045\104\057\075\074\103\001" +
    "\002\000\026\004\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\021\ufff4\024\ufff4\027\ufff4\030\ufff4\001\002\000" +
    "\022\004\102\005\100\006\105\007\076\010\077\045\104" +
    "\057\075\074\103\001\002\000\056\025\uffd9\026\uffd9\032" +
    "\uffd9\044\uffd9\046\uffd9\052\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9" +
    "\001\002\000\056\025\uffd7\026\uffd7\032\uffd7\044\uffd7\046" +
    "\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\001\002\000\056" +
    "\025\uffd8\026\uffd8\032\uffd8\044\uffd8\046\uffd8\052\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\001\002\000\042\032\125\044\162" +
    "\056\120\057\107\060\114\061\112\062\115\063\117\064" +
    "\123\065\122\066\113\067\116\070\121\071\110\072\126" +
    "\073\111\001\002\000\064\025\uffd6\026\uffd6\032\uffd6\044" +
    "\uffd6\045\147\046\uffd6\051\150\052\uffd6\053\151\054\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6" +
    "\072\uffd6\073\uffd6\001\002\000\022\004\102\005\100\006" +
    "\105\007\076\010\077\045\104\057\075\074\103\001\002" +
    "\000\022\004\102\005\100\006\105\007\076\010\077\045" +
    "\104\057\075\074\103\001\002\000\056\025\uffda\026\uffda" +
    "\032\uffda\044\uffda\046\uffda\052\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073" +
    "\uffda\001\002\000\042\032\125\046\124\056\120\057\107" +
    "\060\114\061\112\062\115\063\117\064\123\065\122\066" +
    "\113\067\116\070\121\071\110\072\126\073\111\001\002" +
    "\000\022\004\102\005\100\006\105\007\076\010\077\045" +
    "\104\057\075\074\103\001\002\000\022\004\102\005\100" +
    "\006\105\007\076\010\077\045\104\057\075\074\103\001" +
    "\002\000\022\004\102\005\100\006\105\007\076\010\077" +
    "\045\104\057\075\074\103\001\002\000\022\004\102\005" +
    "\100\006\105\007\076\010\077\045\104\057\075\074\103" +
    "\001\002\000\022\004\102\005\100\006\105\007\076\010" +
    "\077\045\104\057\075\074\103\001\002\000\022\004\102" +
    "\005\100\006\105\007\076\010\077\045\104\057\075\074" +
    "\103\001\002\000\022\004\102\005\100\006\105\007\076" +
    "\010\077\045\104\057\075\074\103\001\002\000\022\004" +
    "\102\005\100\006\105\007\076\010\077\045\104\057\075" +
    "\074\103\001\002\000\022\004\102\005\100\006\105\007" +
    "\076\010\077\045\104\057\075\074\103\001\002\000\022" +
    "\004\102\005\100\006\105\007\076\010\077\045\104\057" +
    "\075\074\103\001\002\000\022\004\102\005\100\006\105" +
    "\007\076\010\077\045\104\057\075\074\103\001\002\000" +
    "\022\004\102\005\100\006\105\007\076\010\077\045\104" +
    "\057\075\074\103\001\002\000\022\004\102\005\100\006" +
    "\105\007\076\010\077\045\104\057\075\074\103\001\002" +
    "\000\056\025\uffc1\026\uffc1\032\uffc1\044\uffc1\046\uffc1\052" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002\000\020\004\030" +
    "\035\024\036\026\037\031\040\033\041\025\076\032\001" +
    "\002\000\022\004\102\005\100\006\105\007\076\010\077" +
    "\045\104\057\075\074\103\001\002\000\056\025\uffcd\026" +
    "\uffcd\032\uffcd\044\uffcd\046\uffcd\052\uffcd\054\uffcd\055\uffcd" +
    "\056\120\057\107\060\114\061\112\062\115\063\117\064" +
    "\123\065\122\066\113\067\116\070\121\071\110\072\uffcd" +
    "\073\uffcd\001\002\000\056\025\uffc4\026\uffc4\032\uffc4\044" +
    "\uffc4\046\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002" +
    "\000\042\025\uffc9\026\uffc9\032\uffc9\044\uffc9\046\uffc9\052" +
    "\uffc9\054\uffc9\055\uffc9\056\120\057\107\060\114\061\112" +
    "\062\115\071\uffc9\072\uffc9\073\uffc9\001\002\000\042\025" +
    "\uffc8\026\uffc8\032\uffc8\044\uffc8\046\uffc8\052\uffc8\054\uffc8" +
    "\055\uffc8\056\120\057\107\060\114\061\112\062\115\071" +
    "\uffc8\072\uffc8\073\uffc8\001\002\000\042\025\uffc5\026\uffc5" +
    "\032\uffc5\044\uffc5\046\uffc5\052\uffc5\054\uffc5\055\uffc5\056" +
    "\120\057\107\060\114\061\112\062\115\071\uffc5\072\uffc5" +
    "\073\uffc5\001\002\000\056\025\uffd4\026\uffd4\032\uffd4\044" +
    "\uffd4\046\uffd4\052\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\114\061\112\062\115\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\001\002" +
    "\000\042\025\uffca\026\uffca\032\uffca\044\uffca\046\uffca\052" +
    "\uffca\054\uffca\055\uffca\056\120\057\107\060\114\061\112" +
    "\062\115\071\uffca\072\uffca\073\uffca\001\002\000\042\025" +
    "\uffc6\026\uffc6\032\uffc6\044\uffc6\046\uffc6\052\uffc6\054\uffc6" +
    "\055\uffc6\056\120\057\107\060\114\061\112\062\115\071" +
    "\uffc6\072\uffc6\073\uffc6\001\002\000\056\025\uffd0\026\uffd0" +
    "\032\uffd0\044\uffd0\046\uffd0\052\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\001\002\000\056\025\uffd2\026\uffd2\032\uffd2\044\uffd2" +
    "\046\uffd2\052\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002\000" +
    "\042\025\uffc7\026\uffc7\032\uffc7\044\uffc7\046\uffc7\052\uffc7" +
    "\054\uffc7\055\uffc7\056\120\057\107\060\114\061\112\062" +
    "\115\071\uffc7\072\uffc7\073\uffc7\001\002\000\056\025\uffd1" +
    "\026\uffd1\032\uffd1\044\uffd1\046\uffd1\052\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\001\002\000\056\025\uffcc\026\uffcc\032\uffcc" +
    "\044\uffcc\046\uffcc\052\uffcc\054\uffcc\055\uffcc\056\120\057" +
    "\107\060\114\061\112\062\115\063\117\064\123\065\122" +
    "\066\113\067\116\070\121\071\110\072\uffcc\073\uffcc\001" +
    "\002\000\056\025\uffce\026\uffce\032\uffce\044\uffce\046\uffce" +
    "\052\uffce\054\uffce\055\uffce\056\120\057\107\060\114\061" +
    "\112\062\115\063\117\064\123\065\122\066\113\067\116" +
    "\070\121\071\uffce\072\uffce\073\uffce\001\002\000\056\025" +
    "\uffd3\026\uffd3\032\uffd3\044\uffd3\046\uffd3\052\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\114\061\112\062\115\063" +
    "\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\001\002\000\056\025\uffcb\026\uffcb\032" +
    "\uffcb\044\uffcb\046\uffcb\052\uffcb\054\uffcb\055\uffcb\056\120" +
    "\057\107\060\114\061\112\062\115\063\117\064\123\065" +
    "\122\066\113\067\116\070\121\071\uffcb\072\uffcb\073\uffcb" +
    "\001\002\000\026\004\102\005\100\006\105\007\076\010" +
    "\077\045\104\046\uffbe\054\uffbe\057\075\074\103\001\002" +
    "\000\022\004\102\005\100\006\105\007\076\010\077\045" +
    "\104\057\075\074\103\001\002\000\004\004\152\001\002" +
    "\000\056\025\uffd5\026\uffd5\032\uffd5\044\uffd5\046\uffd5\052" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\001\002\000\042\032\125" +
    "\052\154\056\120\057\107\060\114\061\112\062\115\063" +
    "\117\064\123\065\122\066\113\067\116\070\121\071\110" +
    "\072\126\073\111\001\002\000\056\025\uffc3\026\uffc3\032" +
    "\uffc3\044\uffc3\046\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\001\002\000\006\046\160\054\157\001\002\000\044\032" +
    "\125\046\uffc0\054\uffc0\056\120\057\107\060\114\061\112" +
    "\062\115\063\117\064\123\065\122\066\113\067\116\070" +
    "\121\071\110\072\126\073\111\001\002\000\022\004\102" +
    "\005\100\006\105\007\076\010\077\045\104\057\075\074" +
    "\103\001\002\000\056\025\uffc2\026\uffc2\032\uffc2\044\uffc2" +
    "\046\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000" +
    "\044\032\125\046\uffbf\054\uffbf\056\120\057\107\060\114" +
    "\061\112\062\115\063\117\064\123\065\122\066\113\067" +
    "\116\070\121\071\110\072\126\073\111\001\002\000\026" +
    "\004\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\021" +
    "\uffec\024\uffec\027\uffec\030\uffec\001\002\000\056\025\uffcf" +
    "\026\uffcf\032\uffcf\044\uffcf\046\uffcf\052\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072" +
    "\uffcf\073\uffcf\001\002\000\022\004\102\005\100\006\105" +
    "\007\076\010\077\045\104\057\075\074\103\001\002\000" +
    "\004\004\171\001\002\000\022\004\102\005\100\006\105" +
    "\007\076\010\077\045\104\057\075\074\103\001\002\000" +
    "\042\032\125\044\170\056\120\057\107\060\114\061\112" +
    "\062\115\063\117\064\123\065\122\066\113\067\116\070" +
    "\121\071\110\072\126\073\111\001\002\000\026\004\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\021\ufff1\024" +
    "\ufff1\027\ufff1\030\ufff1\001\002\000\004\043\172\001\002" +
    "\000\022\004\102\005\100\006\105\007\076\010\077\045" +
    "\104\057\075\074\103\001\002\000\042\032\125\044\174" +
    "\056\120\057\107\060\114\061\112\062\115\063\117\064" +
    "\123\065\122\066\113\067\116\070\121\071\110\072\126" +
    "\073\111\001\002\000\026\004\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\021\ufff0\024\ufff0\027\ufff0\030\ufff0" +
    "\001\002\000\042\032\125\052\176\056\120\057\107\060" +
    "\114\061\112\062\115\063\117\064\123\065\122\066\113" +
    "\067\116\070\121\071\110\072\126\073\111\001\002\000" +
    "\004\043\177\001\002\000\022\004\102\005\100\006\105" +
    "\007\076\010\077\045\104\057\075\074\103\001\002\000" +
    "\042\032\125\044\201\056\120\057\107\060\114\061\112" +
    "\062\115\063\117\064\123\065\122\066\113\067\116\070" +
    "\121\071\110\072\126\073\111\001\002\000\026\004\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\021\uffef\024" +
    "\uffef\027\uffef\030\uffef\001\002\000\022\004\102\005\100" +
    "\006\105\007\076\010\077\045\104\057\075\074\103\001" +
    "\002\000\042\032\125\046\204\056\120\057\107\060\114" +
    "\061\112\062\115\063\117\064\123\065\122\066\113\067" +
    "\116\070\121\071\110\072\126\073\111\001\002\000\004" +
    "\044\205\001\002\000\026\004\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\021\uffee\024\uffee\027\uffee\030\uffee" +
    "\001\002\000\042\025\207\032\125\056\120\057\107\060" +
    "\114\061\112\062\115\063\117\064\123\065\122\066\113" +
    "\067\116\070\121\071\110\072\126\073\111\001\002\000" +
    "\022\004\072\011\066\012\067\014\063\015\065\021\073" +
    "\027\071\030\062\001\002\000\026\004\072\011\066\012" +
    "\067\013\211\014\063\015\065\021\073\024\214\027\071" +
    "\030\062\001\002\000\022\004\072\011\066\012\067\014" +
    "\063\015\065\021\073\027\071\030\062\001\002\000\026" +
    "\004\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\021" +
    "\ufff7\024\ufff7\027\ufff7\030\ufff7\001\002\000\004\024\216" +
    "\001\002\000\004\044\215\001\002\000\026\004\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\021\uffea\024\uffea" +
    "\027\uffea\030\uffea\001\002\000\004\044\217\001\002\000" +
    "\026\004\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\021\uffeb\024\uffeb\027\uffeb\030\uffeb\001\002\000\024\004" +
    "\072\011\066\012\067\014\063\015\065\021\073\024\uffe9" +
    "\027\071\030\062\001\002\000\004\042\222\001\002\000" +
    "\020\004\030\035\024\036\026\037\031\040\033\041\025" +
    "\076\032\001\002\000\006\031\225\044\224\001\002\000" +
    "\026\004\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\021\ufff5\024\ufff5\027\ufff5\030\ufff5\001\002\000\022\004" +
    "\102\005\100\006\105\007\076\010\077\045\104\057\075" +
    "\074\103\001\002\000\042\032\125\044\227\056\120\057" +
    "\107\060\114\061\112\062\115\063\117\064\123\065\122" +
    "\066\113\067\116\070\121\071\110\072\126\073\111\001" +
    "\002\000\026\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\021\ufff6\024\ufff6\027\ufff6\030\ufff6\001\002\000" +
    "\004\016\231\001\002\000\024\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\033\233\045\uffbc\057\uffbc\074\uffbc\001" +
    "\002\000\022\004\102\005\100\006\105\007\076\010\077" +
    "\045\104\057\075\074\103\001\002\000\022\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\045\uffbd\057\uffbd\074\uffbd" +
    "\001\002\000\042\032\125\055\235\056\120\057\107\060" +
    "\114\061\112\062\115\063\117\064\123\065\122\066\113" +
    "\067\116\070\121\071\110\072\126\073\111\001\002\000" +
    "\022\004\102\005\100\006\105\007\076\010\077\045\104" +
    "\057\075\074\103\001\002\000\042\026\237\032\125\056" +
    "\120\057\107\060\114\061\112\062\115\063\117\064\123" +
    "\065\122\066\113\067\116\070\121\071\110\072\126\073" +
    "\111\001\002\000\022\004\072\011\066\012\067\014\063" +
    "\015\065\021\073\027\071\030\062\001\002\000\024\004" +
    "\072\011\066\012\067\014\063\015\065\021\073\024\241" +
    "\027\071\030\062\001\002\000\004\044\242\001\002\000" +
    "\026\004\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\021\ufff2\024\ufff2\027\ufff2\030\ufff2\001\002\000\004\044" +
    "\244\001\002\000\012\002\ufff9\011\ufff9\017\ufff9\020\ufff9" +
    "\001\002\000\042\026\246\032\125\056\120\057\107\060" +
    "\114\061\112\062\115\063\117\064\123\065\122\066\113" +
    "\067\116\070\121\071\110\072\126\073\111\001\002\000" +
    "\022\004\072\011\066\012\067\014\063\015\065\021\073" +
    "\027\071\030\062\001\002\000\024\004\072\011\066\012" +
    "\067\014\063\015\065\021\073\024\250\027\071\030\062" +
    "\001\002\000\004\044\251\001\002\000\026\004\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\021\ufff3\024\ufff3" +
    "\027\ufff3\030\ufff3\001\002\000\004\004\253\001\002\000" +
    "\004\046\254\001\002\000\004\044\255\001\002\000\026" +
    "\004\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\021" +
    "\uffed\024\uffed\027\uffed\030\uffed\001\002\000\004\031\257" +
    "\001\002\000\022\004\072\011\066\012\067\014\063\015" +
    "\065\021\073\027\071\030\062\001\002\000\024\004\072" +
    "\011\066\012\067\014\063\015\065\021\073\024\261\027" +
    "\071\030\062\001\002\000\004\044\262\001\002\000\012" +
    "\002\ufffa\011\ufffa\017\ufffa\020\ufffa\001\002\000\004\002" +
    "\001\001\002\000\004\042\265\001\002\000\020\004\030" +
    "\035\024\036\026\037\031\040\033\041\025\076\032\001" +
    "\002\000\006\031\270\044\267\001\002\000\012\002\ufffd" +
    "\011\ufffd\017\ufffd\020\ufffd\001\002\000\022\004\102\005" +
    "\100\006\105\007\076\010\077\045\104\057\075\074\103" +
    "\001\002\000\042\032\125\044\272\056\120\057\107\060" +
    "\114\061\112\062\115\063\117\064\123\065\122\066\113" +
    "\067\116\070\121\071\110\072\126\073\111\001\002\000" +
    "\012\002\ufffc\011\ufffc\017\ufffc\020\ufffc\001\002\000\012" +
    "\002\ufffe\011\ufffe\017\ufffe\020\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\010\002\005\003\003\017\006\001\001\000" +
    "\004\017\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\050\012\046\013\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\053\001\001\000\002\001\001\000" +
    "\004\014\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\255\001\001\000\010\005\067\006\073\020" +
    "\063\001\001\000\002\001\001\000\004\007\244\001\001" +
    "\000\006\005\211\006\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\100\001" +
    "\001\000\002\001\001\000\004\007\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\145\001\001\000\004" +
    "\007\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\144\001\001\000\004\007\143\001\001\000\004" +
    "\007\142\001\001\000\004\007\141\001\001\000\004\007" +
    "\140\001\001\000\004\007\137\001\001\000\004\007\136" +
    "\001\001\000\004\007\135\001\001\000\004\007\134\001" +
    "\001\000\004\007\133\001\001\000\004\007\132\001\001" +
    "\000\004\007\131\001\001\000\004\007\130\001\001\000" +
    "\002\001\001\000\004\014\127\001\001\000\004\007\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\155\010\154\001\001\000\004\007\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\174" +
    "\001\001\000\002\001\001\000\004\007\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\067\006\073\020\207\001" +
    "\001\000\010\005\211\006\073\021\212\001\001\000\010" +
    "\005\067\006\073\020\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\211\006\073\001" +
    "\001\000\002\001\001\000\004\014\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\231\001\001\000\004\007\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\235\001\001\000\002" +
    "\001\001\000\010\005\067\006\073\020\237\001\001\000" +
    "\006\005\211\006\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\067\006\073\020\246\001\001\000\006" +
    "\005\211\006\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\067\006" +
    "\073\020\257\001\001\000\006\005\211\006\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ImperativeLangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ImperativeLangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ImperativeLangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void debug_message(String message) {
        System.out.println("DEBUG: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ImperativeLangParser$actions {
  private final ImperativeLangParser parser;

  /** Constructor */
  CUP$ImperativeLangParser$actions(ImperativeLangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ImperativeLangParser$do_action_part00000000(
    int                        CUP$ImperativeLangParser$act_num,
    java_cup.runtime.lr_parser CUP$ImperativeLangParser$parser,
    java.util.Stack            CUP$ImperativeLangParser$stack,
    int                        CUP$ImperativeLangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ImperativeLangParser$result;

      /* select the action based on the action number */
      switch (CUP$ImperativeLangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		RESULT = start_val;
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ImperativeLangParser$parser.done_parsing();
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= statement_list 
            {
              Program RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new Program(stmts); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= global_declaration 
            {
              List<Statement> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement decl = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 List<Statement> list = new ArrayList<>(); list.add(decl); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement_list global_declaration 
            {
              List<Statement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		List<Statement> list = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement decl = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 list.add(decl); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // global_declaration ::= VAR IDENTIFIER COLON type_spec SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = type instanceof ArrayType ? 
                new ArrayDecl(id, (ArrayType)type) : 
                new VarDecl(id, type, null); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("global_declaration",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global_declaration ::= VAR IDENTIFIER COLON type_spec IS expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, type, init); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("global_declaration",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global_declaration ::= TYPE IDENTIFIER IS RECORD record_body END SEMICOLON 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<VariableDeclaration> fields = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new TypeDecl(name, new RecordType(fields)); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("global_declaration",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global_declaration ::= ROUTINE IDENTIFIER LPAREN parameter_list_opt RPAREN COLON type_spec IS routine_body END SEMICOLON 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).right;
		List<Parameter> params = (List<Parameter>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Type returnType = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new RoutineDecl(name, params, returnType, body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("global_declaration",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-10)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global_declaration ::= ROUTINE IDENTIFIER LPAREN parameter_list_opt RPAREN IS routine_body END SEMICOLON 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		List<Parameter> params = (List<Parameter>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new RoutineDecl(name, params, null, body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("global_declaration",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-8)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // routine_body ::= statement 
            {
              List<Statement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 List<Statement> list = new ArrayList<>(); list.add(stmt); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("routine_body",14, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // routine_body ::= routine_body statement 
            {
              List<Statement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		List<Statement> list = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 list.add(stmt); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("routine_body",14, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= VAR IDENTIFIER COLON type_spec IS expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, type, init); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= VAR IDENTIFIER COLON type_spec SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, type, null); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= WHILE expression LOOP routine_body END SEMICOLON 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new WhileStatement(cond, body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= FOR IDENTIFIER IN reverse_opt expression RANGE expression LOOP routine_body END SEMICOLON 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).value;
		int revleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).left;
		int revright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).right;
		Reverse rev = (Reverse)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Expression end = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new ForLoop(var, rev, start, end, body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-10)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new Assignment(id, expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= IDENTIFIER DOT IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Statement RESULT =null;
		int recordleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int recordright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		String record = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new Assignment(record + "." + field, expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new Assignment(id, index, expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new PrintStatement(expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new ReadStatement(id); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new ReturnStatement(expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_statement ::= IF expression THEN routine_body else_clause END SEMICOLON 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		List<Statement> thenBody = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> elseBody = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new IfStatement(cond, thenBody, elseBody); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("if_statement",4, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_statement ::= IF expression THEN routine_body END SEMICOLON 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> thenBody = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new IfStatement(cond, thenBody, new ArrayList<>()); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("if_statement",4, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // else_clause ::= ELSE routine_body 
            {
              List<Statement> RESULT =null;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		List<Statement> elseBody = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = elseBody; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("else_clause",15, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameter_list_opt ::= parameter_list 
            {
              List<Parameter> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		List<Parameter> params = (List<Parameter>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = params; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_list_opt ::= 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_list ::= parameter 
            {
              List<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 List<Parameter> list = new ArrayList<>(); list.add(p); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter_list ::= parameter_list COMMA parameter 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 list.add(p); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter ::= IDENTIFIER COLON type_spec 
            {
              Parameter RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new Parameter(name, type); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_spec ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = Type.INTEGER; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_spec ::= REAL 
            {
              Type RESULT =null;
		 RESULT = new SimpleType("real"); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_spec ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new SimpleType("float"); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_spec ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_spec ::= STRING 
            {
              Type RESULT =null;
		 RESULT = Type.STRING; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_spec ::= ARRAY LBRACKET INTEGER_LITERAL RBRACKET type_spec 
            {
              Type RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int elemTypeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int elemTyperight = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Type elemType = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new ArrayType(elemType, size); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_spec ::= IDENTIFIER 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new SimpleType(name); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type_spec",10, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // record_body ::= VAR IDENTIFIER COLON type_spec SEMICOLON 
            {
              List<VariableDeclaration> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 List<VariableDeclaration> list = new ArrayList<>(); 
       list.add(new VarDecl(id, type, null)); 
       RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("record_body",11, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // record_body ::= record_body VAR IDENTIFIER COLON type_spec SEMICOLON 
            {
              List<VariableDeclaration> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		List<VariableDeclaration> list = (List<VariableDeclaration>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 list.add(new VarDecl(id, type, null)); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("record_body",11, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new IntegerLiteral(value); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= REAL_LITERAL 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new RealLiteral(value); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 
        System.out.println("[DEBUG] Parsing string literal: " + value);
        RESULT = new StringLiteral(value); 
    
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BooleanLiteral(value); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new VariableReference(name); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= IDENTIFIER DOT IDENTIFIER 
            {
              Expression RESULT =null;
		int recordleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int recordright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		String record = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new RecordAccess(record, field); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "+", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "-", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression MULTIPLY expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "*", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression DIVIDE expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "/", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "%", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new UnaryExpression("-", expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "and", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "or", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression XOR expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "xor", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new UnaryExpression("not", expr); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "=", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "!=", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "<", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression LESS_OR_EQUAL expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, "<=", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, ">", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression GREATER_OR_EQUAL expression 
            {
              Expression RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression left = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression right = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(left, ">=", right); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression AS type_spec 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int targetTypeleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int targetTyperight = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Type targetType = (Type)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new TypeCast(expr, targetType); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= IDENTIFIER LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new ArrayAccess(name, index); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= IDENTIFIER LPAREN argument_list RPAREN 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new RoutineCall(name, args); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = expr; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // argument_list ::= expression 
            {
              List<Expression> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 List<Expression> list = new ArrayList<>(); list.add(expr); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("argument_list",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // argument_list ::= argument_list COMMA expression 
            {
              List<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 list.add(expr); RESULT = list; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("argument_list",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // argument_list ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("argument_list",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // reverse_opt ::= REVERSE 
            {
              Reverse RESULT =null;
		 RESULT = new Reverse(true); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("reverse_opt",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // reverse_opt ::= 
            {
              Reverse RESULT =null;
		 RESULT = new Reverse(false); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("reverse_opt",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ImperativeLangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ImperativeLangParser$do_action(
    int                        CUP$ImperativeLangParser$act_num,
    java_cup.runtime.lr_parser CUP$ImperativeLangParser$parser,
    java.util.Stack            CUP$ImperativeLangParser$stack,
    int                        CUP$ImperativeLangParser$top)
    throws java.lang.Exception
    {
              return CUP$ImperativeLangParser$do_action_part00000000(
                               CUP$ImperativeLangParser$act_num,
                               CUP$ImperativeLangParser$parser,
                               CUP$ImperativeLangParser$stack,
                               CUP$ImperativeLangParser$top);
    }
}

}
