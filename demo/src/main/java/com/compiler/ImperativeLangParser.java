
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.compiler;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.compiler.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ImperativeLangParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ImperativeLangParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ImperativeLangParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ImperativeLangParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\011\000\002\004\011" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\007\000\002\004\012\000\002\004\012\000\002" +
    "\004\010\000\002\004\015\000\002\004\007\000\002\004" +
    "\005\000\002\004\007\000\002\017\003\000\002\017\002" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\007\000\002" +
    "\006\003\000\002\006\005\000\002\005\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\011\004\000\002\011\004\000\002\011\003\000" +
    "\002\011\005\000\002\011\005\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\024\004\014\011\007\012\010\014\004\015" +
    "\005\017\017\020\011\021\016\027\013\001\002\000\026" +
    "\004\042\005\036\006\046\007\033\010\034\022\035\023" +
    "\037\044\044\055\030\067\043\001\002\000\004\004\173" +
    "\001\002\000\004\002\172\001\002\000\004\004\155\001" +
    "\002\000\026\004\042\005\036\006\046\007\033\010\034" +
    "\022\035\023\037\044\044\055\030\067\043\001\002\000" +
    "\004\004\142\001\002\000\032\002\uffff\004\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff\021" +
    "\uffff\024\uffff\027\uffff\001\002\000\004\044\136\001\002" +
    "\000\006\042\125\044\124\001\002\000\026\002\000\004" +
    "\014\011\007\012\010\014\004\015\005\017\017\020\011" +
    "\021\016\027\013\001\002\000\026\004\042\005\036\006" +
    "\046\007\033\010\034\022\035\023\037\044\044\055\030" +
    "\067\043\001\002\000\004\004\020\001\002\000\004\044" +
    "\021\001\002\000\004\045\022\001\002\000\004\030\023" +
    "\001\002\000\024\004\014\011\007\012\010\014\004\015" +
    "\005\017\017\020\011\021\016\027\013\001\002\000\026" +
    "\004\014\011\007\012\010\014\004\015\005\017\017\020" +
    "\011\021\016\024\026\027\013\001\002\000\032\002\ufffe" +
    "\004\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\024\ufffe\027\ufffe\001\002\000\004" +
    "\043\027\001\002\000\032\002\ufff7\004\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\024\ufff7\027\ufff7\001\002\000\016\004\042\005\036\006" +
    "\046\007\033\010\034\044\044\001\002\000\050\025\uffdf" +
    "\026\uffdf\031\uffdf\043\uffdf\045\uffdf\053\uffdf\056\067\057" +
    "\066\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\066\065\070\uffdf\071\uffdf\072\uffdf\073\uffdf\001\002\000" +
    "\042\025\uffe6\026\uffe6\031\uffe6\043\uffe6\045\uffe6\053\uffe6" +
    "\060\062\061\063\062\060\063\uffe6\064\uffe6\065\uffe6\070" +
    "\061\071\057\072\056\073\uffe6\001\002\000\054\025\uffcd" +
    "\026\uffcd\031\uffcd\043\uffcd\045\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\065\uffcd\066\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\001\002\000\054\025\uffcc\026\uffcc\031\uffcc\043\uffcc" +
    "\045\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\070\uffcc\071\uffcc\072\uffcc\073\uffcc\001\002\000\026\025" +
    "\uffe1\026\uffe1\031\uffe1\043\uffe1\045\uffe1\053\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\073\uffe1\001\002\000\054\025\uffcb\026" +
    "\uffcb\031\uffcb\043\uffcb\045\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\001\002\000\026\025\uffe0\026\uffe0\031\uffe0\043\uffe0\045" +
    "\uffe0\053\uffe0\063\uffe0\064\uffe0\065\uffe0\073\uffe0\001\002" +
    "\000\014\031\051\043\122\063\052\064\054\065\053\001" +
    "\002\000\054\025\uffd8\026\uffd8\031\uffd8\043\uffd8\045\uffd8" +
    "\053\uffd8\054\071\055\072\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\070\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\001\002\000\054\025\uffca\026" +
    "\uffca\031\uffca\043\uffca\045\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\065\uffca\066\uffca\070\uffca\071\uffca\072\uffca\073\uffca" +
    "\001\002\000\016\004\042\005\036\006\046\007\033\010" +
    "\034\044\044\001\002\000\026\004\042\005\036\006\046" +
    "\007\033\010\034\022\035\023\037\044\044\055\030\067" +
    "\043\001\002\000\054\025\uffd2\026\uffd2\031\uffd2\043\uffd2" +
    "\045\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002\000\054\025" +
    "\uffce\026\uffce\031\uffce\043\uffce\045\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\070\uffce\071\uffce\072\uffce" +
    "\073\uffce\001\002\000\014\031\051\045\050\063\052\064" +
    "\054\065\053\001\002\000\054\025\uffcf\026\uffcf\031\uffcf" +
    "\043\uffcf\045\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\001\002\000" +
    "\016\033\107\034\111\035\113\036\106\037\114\040\110" +
    "\001\002\000\022\004\042\005\036\006\046\007\033\010" +
    "\034\044\044\055\030\067\043\001\002\000\022\004\042" +
    "\005\036\006\046\007\033\010\034\044\044\055\030\067" +
    "\043\001\002\000\022\004\042\005\036\006\046\007\033" +
    "\010\034\044\044\055\030\067\043\001\002\000\042\025" +
    "\uffe4\026\uffe4\031\uffe4\043\uffe4\045\uffe4\053\uffe4\060\062" +
    "\061\063\062\060\063\uffe4\064\uffe4\065\uffe4\070\061\071" +
    "\057\072\056\073\uffe4\001\002\000\022\004\042\005\036" +
    "\006\046\007\033\010\034\044\044\055\030\067\043\001" +
    "\002\000\022\004\042\005\036\006\046\007\033\010\034" +
    "\044\044\055\030\067\043\001\002\000\022\004\042\005" +
    "\036\006\046\007\033\010\034\044\044\055\030\067\043" +
    "\001\002\000\022\004\042\005\036\006\046\007\033\010" +
    "\034\044\044\055\030\067\043\001\002\000\022\004\042" +
    "\005\036\006\046\007\033\010\034\044\044\055\030\067" +
    "\043\001\002\000\022\004\042\005\036\006\046\007\033" +
    "\010\034\044\044\055\030\067\043\001\002\000\050\025" +
    "\uffde\026\uffde\031\uffde\043\uffde\045\uffde\053\uffde\056\067" +
    "\057\066\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\065\070\uffde\071\uffde\072\uffde\073\uffde\001\002" +
    "\000\022\004\042\005\036\006\046\007\033\010\034\044" +
    "\044\055\030\067\043\001\002\000\022\004\042\005\036" +
    "\006\046\007\033\010\034\044\044\055\030\067\043\001" +
    "\002\000\022\004\042\005\036\006\046\007\033\010\034" +
    "\044\044\055\030\067\043\001\002\000\054\025\uffd7\026" +
    "\uffd7\031\uffd7\043\uffd7\045\uffd7\053\uffd7\054\071\055\072" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\001\002\000\016\004\042\005\036\006\046\007\033\010" +
    "\034\044\044\001\002\000\016\004\042\005\036\006\046" +
    "\007\033\010\034\044\044\001\002\000\054\025\uffd0\026" +
    "\uffd0\031\uffd0\043\uffd0\045\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\001\002\000\054\025\uffd1\026\uffd1\031\uffd1\043\uffd1\045" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\001\002\000\054\025\uffd6" +
    "\026\uffd6\031\uffd6\043\uffd6\045\uffd6\053\uffd6\054\071\055" +
    "\072\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\uffd6\070\uffd6\071\uffd6\072\uffd6\073" +
    "\uffd6\001\002\000\054\025\uffd5\026\uffd5\031\uffd5\043\uffd5" +
    "\045\uffd5\053\uffd5\054\071\055\072\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\070\uffd5\071\uffd5\072\uffd5\073\uffd5\001\002\000\050\025" +
    "\uffdc\026\uffdc\031\uffdc\043\uffdc\045\uffdc\053\uffdc\056\067" +
    "\057\066\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\065\070\uffdc\071\uffdc\072\uffdc\073\uffdc\001\002" +
    "\000\050\025\uffdb\026\uffdb\031\uffdb\043\uffdb\045\uffdb\053" +
    "\uffdb\056\067\057\066\060\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\065\070\uffdb\071\uffdb\072\uffdb\073" +
    "\uffdb\001\002\000\050\025\uffdd\026\uffdd\031\uffdd\043\uffdd" +
    "\045\uffdd\053\uffdd\056\067\057\066\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\065\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\001\002\000\050\025\uffda\026\uffda\031" +
    "\uffda\043\uffda\045\uffda\053\uffda\056\067\057\066\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\065\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\001\002\000\050\025\uffd9" +
    "\026\uffd9\031\uffd9\043\uffd9\045\uffd9\053\uffd9\056\067\057" +
    "\066\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\065\070\uffd9\071\uffd9\072\uffd9\073\uffd9\001\002\000" +
    "\042\025\uffe3\026\uffe3\031\uffe3\043\uffe3\045\uffe3\053\uffe3" +
    "\060\062\061\063\062\060\063\uffe3\064\uffe3\065\uffe3\070" +
    "\061\071\057\072\056\073\uffe3\001\002\000\042\025\uffe5" +
    "\026\uffe5\031\uffe5\043\uffe5\045\uffe5\053\uffe5\060\062\061" +
    "\063\062\060\063\uffe5\064\uffe5\065\uffe5\070\061\071\057" +
    "\072\056\073\uffe5\001\002\000\032\025\uffeb\026\uffeb\030" +
    "\uffeb\031\uffeb\042\uffeb\043\uffeb\045\uffeb\053\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\073\uffeb\001\002\000\032\025\uffee\026" +
    "\uffee\030\uffee\031\uffee\042\uffee\043\uffee\045\uffee\053\uffee" +
    "\063\uffee\064\uffee\065\uffee\073\uffee\001\002\000\032\025" +
    "\uffea\026\uffea\030\uffea\031\uffea\042\uffea\043\uffea\045\uffea" +
    "\053\uffea\063\uffea\064\uffea\065\uffea\073\uffea\001\002\000" +
    "\032\025\uffed\026\uffed\030\uffed\031\uffed\042\uffed\043\uffed" +
    "\045\uffed\053\uffed\063\uffed\064\uffed\065\uffed\073\uffed\001" +
    "\002\000\026\025\uffe2\026\uffe2\031\uffe2\043\uffe2\045\uffe2" +
    "\053\uffe2\063\uffe2\064\uffe2\065\uffe2\073\uffe2\001\002\000" +
    "\032\025\uffec\026\uffec\030\uffec\031\uffec\042\uffec\043\uffec" +
    "\045\uffec\053\uffec\063\uffec\064\uffec\065\uffec\073\uffec\001" +
    "\002\000\004\050\115\001\002\000\004\006\116\001\002" +
    "\000\004\051\117\001\002\000\016\033\107\034\111\035" +
    "\113\036\106\037\114\040\110\001\002\000\032\025\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\042\uffe9\043\uffe9\045\uffe9\053" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\073\uffe9\001\002\000\054" +
    "\025\uffd3\026\uffd3\031\uffd3\043\uffd3\045\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\001\002\000\032\002\ufff2\004\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\024\ufff2\027\ufff2\001\002\000\054\025\uffd4\026\uffd4" +
    "\031\uffd4\043\uffd4\045\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\001" +
    "\002\000\026\004\042\005\036\006\046\007\033\010\034" +
    "\022\035\023\037\044\044\055\030\067\043\001\002\000" +
    "\026\004\042\005\036\006\046\007\033\010\034\022\035" +
    "\023\037\044\044\055\030\067\043\001\002\000\014\031" +
    "\051\043\127\063\052\064\054\065\053\001\002\000\032" +
    "\002\ufff9\004\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\024\ufff9\027\ufff9\001\002" +
    "\000\006\045\133\053\132\001\002\000\016\031\051\045" +
    "\uffe8\053\uffe8\063\052\064\054\065\053\001\002\000\026" +
    "\004\042\005\036\006\046\007\033\010\034\022\035\023" +
    "\037\044\044\055\030\067\043\001\002\000\004\043\134" +
    "\001\002\000\032\002\ufff3\004\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\024\ufff3" +
    "\027\ufff3\001\002\000\016\031\051\045\uffe7\053\uffe7\063" +
    "\052\064\054\065\053\001\002\000\026\004\042\005\036" +
    "\006\046\007\033\010\034\022\035\023\037\044\044\055" +
    "\030\067\043\001\002\000\014\031\051\045\140\063\052" +
    "\064\054\065\053\001\002\000\004\043\141\001\002\000" +
    "\032\002\ufff1\004\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\024\ufff1\027\ufff1\001" +
    "\002\000\004\030\143\001\002\000\016\033\107\034\111" +
    "\035\113\036\106\037\114\040\110\001\002\000\004\043" +
    "\145\001\002\000\032\002\ufff8\004\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\024" +
    "\ufff8\027\ufff8\001\002\000\014\025\147\031\051\063\052" +
    "\064\054\065\053\001\002\000\024\004\014\011\007\012" +
    "\010\014\004\015\005\017\017\020\011\021\016\027\013" +
    "\001\002\000\026\004\014\011\007\012\010\013\151\014" +
    "\004\015\005\017\017\020\011\021\016\027\013\001\002" +
    "\000\024\004\014\011\007\012\010\014\004\015\005\017" +
    "\017\020\011\021\016\027\013\001\002\000\026\004\014" +
    "\011\007\012\010\014\004\015\005\017\017\020\011\021" +
    "\016\024\153\027\013\001\002\000\004\043\154\001\002" +
    "\000\032\002\ufff6\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\024\ufff6\027\ufff6" +
    "\001\002\000\006\041\156\042\157\001\002\000\016\033" +
    "\107\034\111\035\113\036\106\037\114\040\110\001\002" +
    "\000\026\004\042\005\036\006\046\007\033\010\034\022" +
    "\035\023\037\044\044\055\030\067\043\001\002\000\014" +
    "\031\051\043\161\063\052\064\054\065\053\001\002\000" +
    "\032\002\ufffb\004\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\017\ufffb\020\ufffb\021\ufffb\024\ufffb\027\ufffb\001" +
    "\002\000\010\030\164\042\165\043\163\001\002\000\032" +
    "\002\ufffa\004\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\024\ufffa\027\ufffa\001\002" +
    "\000\026\004\042\005\036\006\046\007\033\010\034\022" +
    "\035\023\037\044\044\055\030\067\043\001\002\000\026" +
    "\004\042\005\036\006\046\007\033\010\034\022\035\023" +
    "\037\044\044\055\030\067\043\001\002\000\014\031\051" +
    "\043\167\063\052\064\054\065\053\001\002\000\032\002" +
    "\ufffd\004\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\024\ufffd\027\ufffd\001\002\000" +
    "\014\031\051\043\171\063\052\064\054\065\053\001\002" +
    "\000\032\002\ufffc\004\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\024\ufffc\027\ufffc" +
    "\001\002\000\004\002\001\001\002\000\004\016\174\001" +
    "\002\000\030\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\022\uffef\023\uffef\032\176\044\uffef\055\uffef\067\uffef\001" +
    "\002\000\026\004\042\005\036\006\046\007\033\010\034" +
    "\022\035\023\037\044\044\055\030\067\043\001\002\000" +
    "\026\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\022\ufff0" +
    "\023\ufff0\044\ufff0\055\ufff0\067\ufff0\001\002\000\014\031" +
    "\051\063\052\064\054\065\053\073\200\001\002\000\026" +
    "\004\042\005\036\006\046\007\033\010\034\022\035\023" +
    "\037\044\044\055\030\067\043\001\002\000\014\026\202" +
    "\031\051\063\052\064\054\065\053\001\002\000\024\004" +
    "\014\011\007\012\010\014\004\015\005\017\017\020\011" +
    "\021\016\027\013\001\002\000\026\004\014\011\007\012" +
    "\010\014\004\015\005\017\017\020\011\021\016\024\204" +
    "\027\013\001\002\000\004\043\205\001\002\000\032\002" +
    "\ufff4\004\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\024\ufff4\027\ufff4\001\002\000" +
    "\014\026\207\031\051\063\052\064\054\065\053\001\002" +
    "\000\024\004\014\011\007\012\010\014\004\015\005\017" +
    "\017\020\011\021\016\027\013\001\002\000\026\004\014" +
    "\011\007\012\010\014\004\015\005\017\017\020\011\021" +
    "\016\024\211\027\013\001\002\000\004\043\212\001\002" +
    "\000\032\002\ufff5\004\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\024\ufff5\027\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\005\003\014\004\011\001\001\000" +
    "\014\005\205\007\031\010\030\011\040\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\145\007\031\010\030\011\040\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\024\001\001\000\014\005\037" +
    "\007\031\010\030\011\040\012\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\023\004\011\001\001\000\004\004\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\120\001\001" +
    "\000\014\005\046\007\031\010\030\011\040\012\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\111\001\001\000\012\007" +
    "\104\010\030\011\040\012\044\001\001\000\012\007\103" +
    "\010\030\011\040\012\044\001\001\000\012\007\054\010" +
    "\030\011\040\012\044\001\001\000\002\001\001\000\010" +
    "\010\102\011\040\012\044\001\001\000\010\010\101\011" +
    "\040\012\044\001\001\000\010\010\100\011\040\012\044" +
    "\001\001\000\010\010\077\011\040\012\044\001\001\000" +
    "\010\010\076\011\040\012\044\001\001\000\010\010\063" +
    "\011\040\012\044\001\001\000\002\001\001\000\006\011" +
    "\075\012\044\001\001\000\006\011\074\012\044\001\001" +
    "\000\006\011\067\012\044\001\001\000\002\001\001\000" +
    "\004\012\073\001\001\000\004\012\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\130" +
    "\006\127\007\031\010\030\011\040\012\044\001\001\000" +
    "\014\005\125\007\031\010\030\011\040\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\134\007\031\010\030\011\040" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\136\007\031\010\030\011\040" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\147\004\011\001\001\000\004\004\024\001\001" +
    "\000\006\003\151\004\011\001\001\000\004\004\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\161\001\001\000\014\005\157\007\031\010" +
    "\030\011\040\012\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\167\007\031\010\030\011\040\012\044\001\001\000\014" +
    "\005\165\007\031\010\030\011\040\012\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\174\001\001\000\014\005\176\007\031\010\030\011\040" +
    "\012\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\200\007\031\010\030\011\040\012\044\001\001" +
    "\000\002\001\001\000\006\003\202\004\011\001\001\000" +
    "\004\004\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\207\004\011\001\001\000" +
    "\004\004\024\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ImperativeLangParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ImperativeLangParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ImperativeLangParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void debug_message(String message) {
        System.out.println("DEBUG: " + message);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ImperativeLangParser$actions {
  private final ImperativeLangParser parser;

  /** Constructor */
  CUP$ImperativeLangParser$actions(ImperativeLangParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ImperativeLangParser$do_action_part00000000(
    int                        CUP$ImperativeLangParser$act_num,
    java_cup.runtime.lr_parser CUP$ImperativeLangParser$parser,
    java.util.Stack            CUP$ImperativeLangParser$stack,
    int                        CUP$ImperativeLangParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ImperativeLangParser$result;

      /* select the action based on the action number */
      switch (CUP$ImperativeLangParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		RESULT = start_val;
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ImperativeLangParser$parser.done_parsing();
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= statement_list 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new Program(s); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); RESULT.add(s); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement_list statement 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 l.add(s); RESULT = l; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= VAR IDENTIFIER COLON type ASSIGN expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, t, e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= VAR IDENTIFIER COLON type IS expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, t, e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= VAR IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, null, e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= VAR IDENTIFIER COLON type SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new VarDecl(id, t, null); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new Assignment(id, e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= TYPE IDENTIFIER IS type SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new TypeDecl(id, t); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= ROUTINE IDENTIFIER LPAREN RPAREN IS statement_list END SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new RoutineDecl(id, body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF expression THEN statement_list ELSE statement_list END SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).value;
		int then_bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int then_bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		List<Statement> then_body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int else_bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int else_bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> else_body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new IfStatement(e, then_body, else_body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE expression LOOP statement_list END SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new WhileStatement(e, body); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-5)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= FOR IDENTIFIER IN reverse_opt expression RANGE expression LOOP statement_list END SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-9)).value;
		int revleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).left;
		int revright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).right;
		Reverse rev = (Reverse)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		Expression end = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new ForLoop(id, start, end, body, rev); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-10)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= IDENTIFIER LPAREN argument_list RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new RoutineCall(id, args); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= RETURN expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = new ReturnStatement(e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		 RESULT = new PrintStatement(e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reverse_opt ::= REVERSE 
            {
              Reverse RESULT =null;
		 RESULT = new Reverse(true); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("reverse_opt",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reverse_opt ::= 
            {
              Reverse RESULT =null;
		 RESULT = new Reverse(false); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("reverse_opt",13, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INTEGER 
            {
              String RESULT =null;
		 RESULT = "integer"; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= REAL 
            {
              String RESULT =null;
		 RESULT = "real"; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= RECORD 
            {
              String RESULT =null;
		 RESULT = "record"; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= STRING 
            {
              String RESULT =null;
		 RESULT = "string"; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= ARRAY LBRACKET INTEGER_LITERAL RBRACKET type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = "array[" + t + "]"; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-4)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argument_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("argument_list",4, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argument_list ::= argument_list COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("argument_list",4, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= relation 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression AND relation 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "and", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression OR relation 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "or", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression XOR relation 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "xor", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression AS type 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new TypeCastExpression(e, t); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new LiteralExpression(true); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new LiteralExpression(false); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relation ::= simple 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relation ::= relation LESS simple 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "<", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relation ::= relation GREATER simple 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, ">", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relation ::= relation EQUAL simple 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "=", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relation ::= relation GREATER_OR_EQUAL simple 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, ">=", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relation ::= relation LESS_OR_EQUAL simple 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "<=", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relation ::= relation NOT_EQUAL simple 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "!=", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("relation",5, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple ::= factor 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("simple",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple ::= simple MULTIPLY factor 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "*", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("simple",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple ::= simple DIVIDE factor 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "/", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("simple",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple ::= simple MOD factor 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "%", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("simple",6, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= MINUS summand 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new UnaryExpression("-", e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= NOT summand 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new UnaryExpression("not", e); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= summand 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= factor PLUS summand 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "+", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= factor MINUS summand 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, "-", e2); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // summand ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-1)).value;
		 RESULT = e; 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("summand",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.elementAt(CUP$ImperativeLangParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // summand ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new LiteralExpression(i); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("summand",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // summand ::= REAL_LITERAL 
            {
              Expression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new LiteralExpression(r); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("summand",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // summand ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new LiteralExpression(b); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("summand",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // summand ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new LiteralExpression(s); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("summand",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // summand ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImperativeLangParser$stack.peek()).value;
		 RESULT = new VariableExpression(id); 
              CUP$ImperativeLangParser$result = parser.getSymbolFactory().newSymbol("summand",8, ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImperativeLangParser$stack.peek()), RESULT);
            }
          return CUP$ImperativeLangParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ImperativeLangParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ImperativeLangParser$do_action(
    int                        CUP$ImperativeLangParser$act_num,
    java_cup.runtime.lr_parser CUP$ImperativeLangParser$parser,
    java.util.Stack            CUP$ImperativeLangParser$stack,
    int                        CUP$ImperativeLangParser$top)
    throws java.lang.Exception
    {
              return CUP$ImperativeLangParser$do_action_part00000000(
                               CUP$ImperativeLangParser$act_num,
                               CUP$ImperativeLangParser$parser,
                               CUP$ImperativeLangParser$stack,
                               CUP$ImperativeLangParser$top);
    }
}

}
