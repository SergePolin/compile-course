
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package src;

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\013\000" +
    "\002\006\011\000\002\007\007\000\002\007\011\000\002" +
    "\010\005\000\002\010\003\000\002\010\002\000\002\011" +
    "\005\000\002\012\003\000\002\012\007\000\002\012\003" +
    "\000\002\012\003\000\002\013\004\000\002\013\002\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\004\000\002\015\006" +
    "\000\002\016\012\000\002\017\010\000\002\020\014\000" +
    "\002\020\015\000\002\021\007\000\002\022\007\000\002" +
    "\023\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\004\000\002\024\004\000" +
    "\002\024\005\000\002\024\006\000\002\024\005\000\002" +
    "\024\006\000\002\025\005\000\002\025\003\000\002\025" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\012\002\uffff\031\006\032\013\047\007\001" +
    "\002\000\012\002\ufffd\031\006\032\013\047\007\001\002" +
    "\000\004\002\241\001\002\000\004\063\232\001\002\000" +
    "\004\063\224\001\002\000\012\002\ufffb\031\ufffb\032\ufffb" +
    "\047\ufffb\001\002\000\012\002\ufffa\031\ufffa\032\ufffa\047" +
    "\ufffa\001\002\000\012\002\ufffc\031\ufffc\032\ufffc\047\ufffc" +
    "\001\002\000\004\063\015\001\002\000\004\002\000\001" +
    "\002\000\004\011\016\001\002\000\006\012\ufff3\063\017" +
    "\001\002\000\004\024\212\001\002\000\004\012\024\001" +
    "\002\000\006\012\ufff4\026\022\001\002\000\006\012\ufff3" +
    "\063\017\001\002\000\004\012\ufff5\001\002\000\004\033" +
    "\025\001\002\000\044\005\052\011\042\031\006\034\uffec" +
    "\035\041\040\031\041\055\044\053\045\026\046\036\055" +
    "\033\057\037\060\051\063\035\064\043\065\054\066\034" +
    "\001\002\000\004\011\206\001\002\000\046\005\052\011" +
    "\042\031\006\034\uffec\035\041\037\uffec\040\031\041\055" +
    "\044\053\045\026\046\036\055\033\057\037\060\051\063" +
    "\035\064\043\065\054\066\034\001\002\000\046\005\uffe9" +
    "\011\uffe9\031\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\055\uffe9\057\uffe9\060\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\001\002\000\024\005" +
    "\052\011\042\055\033\057\037\060\051\063\063\064\043" +
    "\065\054\066\034\001\002\000\046\005\uffe8\011\uffe8\031" +
    "\uffe8\034\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\055\uffe8\057\uffe8\060\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\001\002\000\024\005\052\011\042" +
    "\055\033\057\037\060\051\063\063\064\043\065\054\066" +
    "\034\001\002\000\060\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\036\uffd9\043\uffd9\053\uffd9\054\uffd9\056\uffd9\001" +
    "\002\000\050\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\135\013\uffd5\015\174\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\025\uffd5\027\uffd5\053\uffd5\054\uffd5" +
    "\056\uffd5\001\002\000\024\005\052\011\042\055\033\057" +
    "\037\060\051\063\063\064\043\065\054\066\034\001\002" +
    "\000\060\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\036" +
    "\uffd7\043\uffd7\053\uffd7\054\uffd7\056\uffd7\001\002\000\046" +
    "\005\uffea\011\uffea\031\uffea\034\uffea\035\uffea\037\uffea\040" +
    "\uffea\041\uffea\044\uffea\045\uffea\046\uffea\055\uffea\057\uffea" +
    "\060\uffea\063\uffea\064\uffea\065\uffea\066\uffea\001\002\000" +
    "\024\005\052\011\042\055\033\057\037\060\051\063\063" +
    "\064\043\065\054\066\034\001\002\000\024\005\052\011" +
    "\042\055\033\057\037\060\051\063\063\064\043\065\054" +
    "\066\034\001\002\000\060\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\036\uffd8\043\uffd8\053\uffd8\054\uffd8\056\uffd8" +
    "\001\002\000\046\005\uffe7\011\uffe7\031\uffe7\034\uffe7\035" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\055\uffe7\057\uffe7\060\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\001\002\000\004\034\157\001\002\000\044\004\075" +
    "\005\066\006\104\007\071\010\100\013\105\016\074\017" +
    "\102\020\101\021\077\022\073\023\103\025\156\027\076" +
    "\053\067\054\106\056\070\001\002\000\046\005\uffe5\011" +
    "\uffe5\031\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\055\uffe5\057\uffe5\060\uffe5\063" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\001\002\000\046\005\uffeb" +
    "\011\uffeb\031\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\055\uffeb\057\uffeb\060\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\001\002\000\060\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\036\uffd6\043\uffd6" +
    "\053\uffd6\054\uffd6\056\uffd6\001\002\000\024\005\052\011" +
    "\042\055\033\057\037\060\051\063\063\064\043\065\054" +
    "\066\034\001\002\000\004\011\151\001\002\000\060\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda" +
    "\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\036\uffda\043\uffda" +
    "\053\uffda\054\uffda\056\uffda\001\002\000\004\063\060\001" +
    "\002\000\046\005\uffe4\011\uffe4\031\uffe4\034\uffe4\035\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\046\uffe4\055" +
    "\uffe4\057\uffe4\060\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\001\002\000\046\005\uffe6\011\uffe6\031\uffe6\034\uffe6\035" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\055\uffe6\057\uffe6\060\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\001\002\000\004\062\061\001\002\000\026\005\052" +
    "\011\042\042\064\055\033\057\037\060\051\063\063\064" +
    "\043\065\054\066\034\001\002\000\044\004\075\005\066" +
    "\006\104\007\071\010\100\013\105\016\074\017\102\020" +
    "\101\021\077\022\073\023\103\027\076\030\143\053\067" +
    "\054\106\056\070\001\002\000\062\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\135\012\uffd5\013\uffd5\014\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\036\uffd5\043\uffd5\053\uffd5" +
    "\054\uffd5\056\uffd5\001\002\000\024\005\052\011\042\055" +
    "\033\057\037\060\051\063\063\064\043\065\054\066\034" +
    "\001\002\000\044\004\075\005\066\006\104\007\071\010" +
    "\100\013\105\016\074\017\102\020\101\021\077\022\073" +
    "\023\103\027\076\030\072\053\067\054\106\056\070\001" +
    "\002\000\024\005\052\011\042\055\033\057\037\060\051" +
    "\063\063\064\043\065\054\066\034\001\002\000\024\005" +
    "\052\011\042\055\033\057\037\060\051\063\063\064\043" +
    "\065\054\066\034\001\002\000\024\005\052\011\042\055" +
    "\033\057\037\060\051\063\063\064\043\065\054\066\034" +
    "\001\002\000\024\005\052\011\042\055\033\057\037\060" +
    "\051\063\063\064\043\065\054\066\034\001\002\000\024" +
    "\005\052\011\042\055\033\057\037\060\051\063\063\064" +
    "\043\065\054\066\034\001\002\000\024\005\052\011\042" +
    "\055\033\057\037\060\051\063\063\064\043\065\054\066" +
    "\034\001\002\000\024\005\052\011\042\055\033\057\037" +
    "\060\051\063\063\064\043\065\054\066\034\001\002\000" +
    "\024\005\052\011\042\055\033\057\037\060\051\063\063" +
    "\064\043\065\054\066\034\001\002\000\004\063\120\001" +
    "\002\000\024\005\052\011\042\055\033\057\037\060\051" +
    "\063\063\064\043\065\054\066\034\001\002\000\024\005" +
    "\052\011\042\055\033\057\037\060\051\063\063\064\043" +
    "\065\054\066\034\001\002\000\024\005\052\011\042\055" +
    "\033\057\037\060\051\063\063\064\043\065\054\066\034" +
    "\001\002\000\024\005\052\011\042\055\033\057\037\060" +
    "\051\063\063\064\043\065\054\066\034\001\002\000\024" +
    "\005\052\011\042\055\033\057\037\060\051\063\063\064" +
    "\043\065\054\066\034\001\002\000\024\005\052\011\042" +
    "\055\033\057\037\060\051\063\063\064\043\065\054\066" +
    "\034\001\002\000\024\005\052\011\042\055\033\057\037" +
    "\060\051\063\063\064\043\065\054\066\034\001\002\000" +
    "\024\005\052\011\042\055\033\057\037\060\051\063\063" +
    "\064\043\065\054\066\034\001\002\000\060\004\075\005" +
    "\066\006\104\007\071\010\100\012\uffc8\013\105\014\uffc8" +
    "\016\074\017\102\020\101\021\077\022\073\023\103\025" +
    "\uffc8\026\uffc8\027\076\030\uffc8\036\uffc8\043\uffc8\053\067" +
    "\054\uffc8\056\uffc8\001\002\000\044\004\075\005\066\006" +
    "\104\007\071\010\100\013\105\014\111\016\074\017\102" +
    "\020\101\021\077\022\073\023\103\027\076\053\067\054" +
    "\106\056\070\001\002\000\060\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\036\uffc1\043\uffc1\053\uffc1\054\uffc1\056" +
    "\uffc1\001\002\000\060\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\012\uffd2\013\105\014\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027\076" +
    "\030\uffd2\036\uffd2\043\uffd2\053\uffd2\054\uffd2\056\uffd2\001" +
    "\002\000\044\004\075\005\066\006\104\007\071\010\100" +
    "\012\uffca\013\105\014\uffca\025\uffca\026\uffca\027\076\030" +
    "\uffca\036\uffca\043\uffca\053\uffca\054\uffca\056\uffca\001\002" +
    "\000\044\004\075\005\066\006\104\007\071\010\100\012" +
    "\uffce\013\105\014\uffce\025\uffce\026\uffce\027\076\030\uffce" +
    "\036\uffce\043\uffce\053\uffce\054\uffce\056\uffce\001\002\000" +
    "\044\004\075\005\066\006\104\007\071\010\100\012\uffcd" +
    "\013\105\014\uffcd\025\uffcd\026\uffcd\027\076\030\uffcd\036" +
    "\uffcd\043\uffcd\053\uffcd\054\uffcd\056\uffcd\001\002\000\060" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013" +
    "\105\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\025\uffd0\026\uffd0\027\076\030\uffd0\036\uffd0\043" +
    "\uffd0\053\uffd0\054\uffd0\056\uffd0\001\002\000\044\004\075" +
    "\005\066\006\104\007\071\010\100\012\uffcc\013\105\014" +
    "\uffcc\025\uffcc\026\uffcc\027\076\030\uffcc\036\uffcc\043\uffcc" +
    "\053\uffcc\054\uffcc\056\uffcc\001\002\000\060\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\036\uffc2\043\uffc2\053\uffc2" +
    "\054\uffc2\056\uffc2\001\002\000\060\004\uffd4\005\uffd4\006" +
    "\104\007\071\010\100\012\uffd4\013\105\014\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\026" +
    "\uffd4\027\076\030\uffd4\036\uffd4\043\uffd4\053\uffd4\054\uffd4" +
    "\056\uffd4\001\002\000\044\004\075\005\066\006\104\007" +
    "\071\010\100\012\uffcf\013\105\014\uffcf\025\uffcf\026\uffcf" +
    "\027\076\030\uffcf\036\uffcf\043\uffcf\053\uffcf\054\uffcf\056" +
    "\uffcf\001\002\000\044\004\075\005\066\006\104\007\071" +
    "\010\100\012\uffcb\013\105\014\uffcb\025\uffcb\026\uffcb\027" +
    "\076\030\uffcb\036\uffcb\043\uffcb\053\uffcb\054\uffcb\056\uffcb" +
    "\001\002\000\044\004\075\005\066\006\104\007\071\010" +
    "\100\013\105\016\074\017\102\020\101\021\077\022\073" +
    "\023\103\027\076\043\125\053\067\054\106\056\070\001" +
    "\002\000\044\005\052\011\042\031\006\034\uffec\035\041" +
    "\040\031\041\055\044\053\045\026\046\036\055\033\057" +
    "\037\060\051\063\035\064\043\065\054\066\034\001\002" +
    "\000\004\034\127\001\002\000\004\025\130\001\002\000" +
    "\046\005\uffde\011\uffde\031\uffde\034\uffde\035\uffde\037\uffde" +
    "\040\uffde\041\uffde\044\uffde\045\uffde\046\uffde\055\uffde\057" +
    "\uffde\060\uffde\063\uffde\064\uffde\065\uffde\066\uffde\001\002" +
    "\000\060\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012" +
    "\uffd1\013\105\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\076\030\uffd1\036" +
    "\uffd1\043\uffd1\053\uffd1\054\uffd1\056\uffd1\001\002\000\060" +
    "\004\075\005\066\006\104\007\071\010\100\012\uffc7\013" +
    "\105\014\uffc7\016\074\017\102\020\101\021\077\022\073" +
    "\023\103\025\uffc7\026\uffc7\027\076\030\uffc7\036\uffc7\043" +
    "\uffc7\053\067\054\uffc7\056\uffc7\001\002\000\060\004\075" +
    "\005\066\006\104\007\071\010\100\012\uffc9\013\105\014" +
    "\uffc9\016\074\017\102\020\101\021\077\022\073\023\103" +
    "\025\uffc9\026\uffc9\027\076\030\uffc9\036\uffc9\043\uffc9\053" +
    "\uffc9\054\uffc9\056\uffc9\001\002\000\060\004\uffd3\005\uffd3" +
    "\006\104\007\071\010\100\012\uffd3\013\105\014\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3" +
    "\026\uffd3\027\076\030\uffd3\036\uffd3\043\uffd3\053\uffd3\054" +
    "\uffd3\056\uffd3\001\002\000\026\005\052\011\042\012\uffbe" +
    "\055\033\057\037\060\051\063\063\064\043\065\054\066" +
    "\034\001\002\000\046\004\075\005\066\006\104\007\071" +
    "\010\100\012\uffbf\013\105\016\074\017\102\020\101\021" +
    "\077\022\073\023\103\026\141\027\076\053\067\054\106" +
    "\056\070\001\002\000\004\012\140\001\002\000\060\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\036\uffc3\043\uffc3" +
    "\053\uffc3\054\uffc3\056\uffc3\001\002\000\026\005\052\011" +
    "\042\012\uffbe\055\033\057\037\060\051\063\063\064\043" +
    "\065\054\066\034\001\002\000\004\012\uffc0\001\002\000" +
    "\024\005\052\011\042\055\033\057\037\060\051\063\063" +
    "\064\043\065\054\066\034\001\002\000\044\004\075\005" +
    "\066\006\104\007\071\010\100\013\105\016\074\017\102" +
    "\020\101\021\077\022\073\023\103\027\076\043\145\053" +
    "\067\054\106\056\070\001\002\000\044\005\052\011\042" +
    "\031\006\034\uffec\035\041\040\031\041\055\044\053\045" +
    "\026\046\036\055\033\057\037\060\051\063\035\064\043" +
    "\065\054\066\034\001\002\000\004\034\147\001\002\000" +
    "\004\025\150\001\002\000\046\005\uffdf\011\uffdf\031\uffdf" +
    "\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\055\uffdf\057\uffdf\060\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\001\002\000\024\005\052\011\042\055" +
    "\033\057\037\060\051\063\063\064\043\065\054\066\034" +
    "\001\002\000\044\004\075\005\066\006\104\007\071\010" +
    "\100\012\153\013\105\016\074\017\102\020\101\021\077" +
    "\022\073\023\103\027\076\053\067\054\106\056\070\001" +
    "\002\000\004\025\154\001\002\000\046\005\uffdd\011\uffdd" +
    "\031\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\055\uffdd\057\uffdd\060\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\001\002\000\060\004\uffc5\005" +
    "\uffc5\006\104\007\071\010\100\012\uffc5\013\105\014\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\026\uffc5\027\076\030\uffc5\036\uffc5\043\uffc5\053\uffc5" +
    "\054\uffc5\056\uffc5\001\002\000\046\005\uffe3\011\uffe3\031" +
    "\uffe3\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\055\uffe3\057\uffe3\060\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\001\002\000\004\025\160\001\002" +
    "\000\012\002\ufff9\031\ufff9\032\ufff9\047\ufff9\001\002\000" +
    "\044\004\075\005\066\006\104\007\071\010\100\012\162" +
    "\013\105\016\074\017\102\020\101\021\077\022\073\023" +
    "\103\027\076\053\067\054\106\056\070\001\002\000\060" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\036\uffc4\043" +
    "\uffc4\053\uffc4\054\uffc4\056\uffc4\001\002\000\044\004\075" +
    "\005\066\006\104\007\071\010\100\013\105\016\074\017" +
    "\102\020\101\021\077\022\073\023\103\027\076\036\164" +
    "\053\067\054\106\056\070\001\002\000\044\005\052\011" +
    "\042\031\006\035\041\037\uffec\040\031\041\055\044\053" +
    "\045\026\046\036\055\033\057\037\060\051\063\035\064" +
    "\043\065\054\066\034\001\002\000\004\037\166\001\002" +
    "\000\044\005\052\011\042\031\006\034\uffec\035\041\040" +
    "\031\041\055\044\053\045\026\046\036\055\033\057\037" +
    "\060\051\063\035\064\043\065\054\066\034\001\002\000" +
    "\004\034\170\001\002\000\004\025\171\001\002\000\046" +
    "\005\uffe1\011\uffe1\031\uffe1\034\uffe1\035\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\046\uffe1\055\uffe1\057\uffe1" +
    "\060\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\001\002\000" +
    "\044\004\075\005\066\006\104\007\071\010\100\013\105" +
    "\016\074\017\102\020\101\021\077\022\073\023\103\025" +
    "\173\027\076\053\067\054\106\056\070\001\002\000\046" +
    "\005\uffdb\011\uffdb\031\uffdb\034\uffdb\035\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\044\uffdb\045\uffdb\046\uffdb\055\uffdb\057\uffdb" +
    "\060\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000" +
    "\024\005\052\011\042\055\033\057\037\060\051\063\063" +
    "\064\043\065\054\066\034\001\002\000\044\004\075\005" +
    "\066\006\104\007\071\010\100\013\105\016\074\017\102" +
    "\020\101\021\077\022\073\023\103\025\176\027\076\053" +
    "\067\054\106\056\070\001\002\000\046\005\uffe2\011\uffe2" +
    "\031\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\055\uffe2\057\uffe2\060\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\001\002\000\060\004\075\005" +
    "\066\006\104\007\071\010\100\012\uffc6\013\105\014\uffc6" +
    "\016\074\017\102\020\101\021\077\022\073\023\103\025" +
    "\uffc6\026\uffc6\027\076\030\uffc6\036\uffc6\043\uffc6\053\uffc6" +
    "\054\uffc6\056\uffc6\001\002\000\044\004\075\005\066\006" +
    "\104\007\071\010\100\013\105\016\074\017\102\020\101" +
    "\021\077\022\073\023\103\027\076\043\201\053\067\054" +
    "\106\056\070\001\002\000\044\005\052\011\042\031\006" +
    "\034\uffec\035\041\040\031\041\055\044\053\045\026\046" +
    "\036\055\033\057\037\060\051\063\035\064\043\065\054" +
    "\066\034\001\002\000\004\034\203\001\002\000\004\025" +
    "\204\001\002\000\046\005\uffe0\011\uffe0\031\uffe0\034\uffe0" +
    "\035\uffe0\037\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\055\uffe0\057\uffe0\060\uffe0\063\uffe0\064\uffe0\065\uffe0" +
    "\066\uffe0\001\002\000\006\034\uffed\037\uffed\001\002\000" +
    "\004\063\207\001\002\000\004\012\210\001\002\000\004" +
    "\025\211\001\002\000\046\005\uffdc\011\uffdc\031\uffdc\034" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\055\uffdc\057\uffdc\060\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\001\002\000\012\051\214\052\213\061\217" +
    "\063\216\001\002\000\012\012\uffee\025\uffee\026\uffee\033" +
    "\uffee\001\002\000\012\012\uffef\025\uffef\026\uffef\033\uffef" +
    "\001\002\000\006\012\ufff2\026\ufff2\001\002\000\012\012" +
    "\ufff1\025\ufff1\026\ufff1\033\ufff1\001\002\000\004\013\220" +
    "\001\002\000\004\065\221\001\002\000\004\014\222\001" +
    "\002\000\012\051\214\052\213\061\217\063\216\001\002" +
    "\000\012\012\ufff0\025\ufff0\026\ufff0\033\ufff0\001\002\000" +
    "\004\033\225\001\002\000\004\050\226\001\002\000\004" +
    "\031\006\001\002\000\004\034\230\001\002\000\004\025" +
    "\231\001\002\000\012\002\ufff8\031\ufff8\032\ufff8\047\ufff8" +
    "\001\002\000\004\024\233\001\002\000\012\051\214\052" +
    "\213\061\217\063\216\001\002\000\006\025\235\033\236" +
    "\001\002\000\054\002\ufff7\005\ufff7\011\ufff7\031\ufff7\032" +
    "\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\055\ufff7\057\ufff7\060\ufff7\063" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\001\002\000\024\005\052" +
    "\011\042\055\033\057\037\060\051\063\063\064\043\065" +
    "\054\066\034\001\002\000\044\004\075\005\066\006\104" +
    "\007\071\010\100\013\105\016\074\017\102\020\101\021" +
    "\077\022\073\023\103\025\240\027\076\053\067\054\106" +
    "\056\070\001\002\000\054\002\ufff6\005\ufff6\011\ufff6\031" +
    "\ufff6\032\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\055\ufff6\057\ufff6\060" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\016\002\004\003\013\004\003\005\011\006" +
    "\007\007\010\001\001\000\014\003\241\004\003\005\011" +
    "\006\007\007\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\017\011\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\022\011\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\047\013\044\014\026\015\037\016\027\017" +
    "\031\020\043\021\056\022\046\023\055\024\045\001\001" +
    "\000\002\001\001\000\030\007\047\013\204\014\026\015" +
    "\037\016\027\017\031\020\043\021\056\022\046\023\055" +
    "\024\045\001\001\000\002\001\001\000\004\024\177\001" +
    "\001\000\002\001\001\000\004\024\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\162\001\001" +
    "\000\004\024\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\064\001\001\000\002\001\001\000\004\024" +
    "\133\001\001\000\004\024\132\001\001\000\004\024\131" +
    "\001\001\000\004\024\130\001\001\000\004\024\123\001" +
    "\001\000\004\024\122\001\001\000\004\024\121\001\001" +
    "\000\004\024\120\001\001\000\002\001\001\000\004\024" +
    "\116\001\001\000\004\024\115\001\001\000\004\024\114" +
    "\001\001\000\004\024\113\001\001\000\004\024\112\001" +
    "\001\000\004\024\111\001\001\000\004\024\107\001\001" +
    "\000\004\024\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\047\013\125\014\026\015\037\016\027\017\031\020\043" +
    "\021\056\022\046\023\055\024\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\135\025\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\135\025\141\001" +
    "\001\000\002\001\001\000\004\024\143\001\001\000\002" +
    "\001\001\000\030\007\047\013\145\014\026\015\037\016" +
    "\027\017\031\020\043\021\056\022\046\023\055\024\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\047\013" +
    "\164\014\026\015\037\016\027\017\031\020\043\021\056" +
    "\022\046\023\055\024\045\001\001\000\002\001\001\000" +
    "\030\007\047\013\166\014\026\015\037\016\027\017\031" +
    "\020\043\021\056\022\046\023\055\024\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\047\013\201\014\026\015\037\016" +
    "\027\017\031\020\043\021\056\022\046\023\055\024\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error at line " + cur_token.left + ", column " + cur_token.right + ": Unexpected " + sym.terminalNames[cur_token.sym], null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations 
            {
              Program RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaration> decls = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(decls); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Program RESULT =null;
		 RESULT = new Program(new ArrayList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration declarations 
            {
              List<Declaration> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Declaration> decls = (List<Declaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 decls.add(0, decl); RESULT = decls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              List<Declaration> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration decl = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Declaration> decls = new ArrayList<>(); decls.add(decl); RESULT = decls; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= routine_declaration 
            {
              Declaration RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RoutineDeclaration rd = (RoutineDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= type_declaration 
            {
              Declaration RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeDeclaration td = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = td; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= var_declaration 
            {
              Declaration RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDeclaration vd = (VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // routine_declaration ::= ROUTINE IDENTIFIER LPAREN parameter_list RPAREN IS statement_list END SEMICOLON 
            {
              RoutineDeclaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Parameter> params = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new RoutineDeclaration(name, params, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("routine_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declaration ::= TYPE IDENTIFIER IS RECORD var_declaration END SEMICOLON 
            {
              TypeDeclaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclaration fields = (VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new TypeDeclaration(name, fields); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_declaration ::= VAR IDENTIFIER COLON type SEMICOLON 
            {
              VarDeclaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(name, t, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_declaration ::= VAR IDENTIFIER COLON type IS expression SEMICOLON 
            {
              VarDeclaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclaration(name, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter_list ::= parameter COMMA parameter_list 
            {
              List<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 pl.add(0, p); RESULT = pl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter_list ::= parameter 
            {
              List<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter_list ::= 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameter ::= IDENTIFIER COLON type 
            {
              Parameter RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameter(name, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleType(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= ARRAY LBRACKET INTEGER_LITERAL RBRACKET type 
            {
              Type RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayType(t, size); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new SimpleType("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new SimpleType("integer"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement statement_list 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(0, s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= var_declaration 
            {
              Statement RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDeclaration vd = (VarDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= assignment_statement 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AssignmentStatement as = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement is = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= while_statement 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatement ws = (WhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= for_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStatement fs = (ForStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= print_statement 
            {
              Statement RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrintStatement ps = (PrintStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= read_statement 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ReadStatement rs = (ReadStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ReturnStatement rs = (ReturnStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= expression SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExpressionStatement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment_statement ::= IDENTIFIER ASSIGN expression SEMICOLON 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignmentStatement(id, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_statement ::= IF expression THEN statement_list ELSE statement_list END SEMICOLON 
            {
              IfStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Statement> thenBody = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> elseBody = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IfStatement(cond, thenBody, elseBody); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_statement ::= WHILE expression LOOP statement_list END SEMICOLON 
            {
              WhileStatement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WhileStatement(cond, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_statement ::= FOR IDENTIFIER IN expression RANGE expression LOOP statement_list END SEMICOLON 
            {
              ForStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression end = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ForStatement(id, start, end, body, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_statement ::= FOR IDENTIFIER IN REVERSE expression RANGE expression LOOP statement_list END SEMICOLON 
            {
              ForStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression end = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ForStatement(id, start, end, body, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // print_statement ::= PRINT LPAREN expression RPAREN SEMICOLON 
            {
              PrintStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new PrintStatement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // read_statement ::= READ LPAREN IDENTIFIER RPAREN SEMICOLON 
            {
              ReadStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ReadStatement(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return_statement ::= RETURN expression SEMICOLON 
            {
              ReturnStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStatement(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(il); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= REAL_LITERAL 
            {
              Expression RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double rl = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealLiteral(rl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanLiteral(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanLiteral(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExpression(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.PLUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.MINUS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression TIMES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.TIMES, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression DIVIDE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.DIVIDE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MODULO expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.MODULO, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.NOT_EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.LESS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression LESS_EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.LESS_EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.GREATER, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression GREATER_EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.GREATER_EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.AND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.OR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression XOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpression(e1, BinaryOp.XOR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOp.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOp.MINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= IDENTIFIER LPAREN expression_list RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RoutineCall(id, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression DOT IDENTIFIER 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordAccess(e1, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression LBRACKET expression RBRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAccess(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_list ::= expression COMMA expression_list 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 el.add(0, e); RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_list ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
